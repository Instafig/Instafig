// Code generated by go-bindata.
// sources:
// web-bin/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _webBinIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x56\xb1\x6e\xdb\x48\x10\xed\xf5\x15\xeb\xbd\xc2\x77\xc0\x51\x3c\x1f\xae\x38\xd8\x24\x9b\x24\x45\x8a\xc4\x29\xd2\xa4\x32\x86\xe4\x48\x5c\x7b\xb9\xcb\xec\x2e\x65\x0b\x86\x01\xa7\x4a\x3e\xc0\x3f\x90\x2e\x5d\xca\x00\x6e\xf2\x33\xb1\x83\xfc\x45\x96\x4b\x4a\xa2\x25\x52\xa6\x52\xc5\x80\xa1\x9d\xd1\xbc\x99\xb7\xb3\x33\xa3\x09\xf6\x9e\x1e\x3f\x79\xfd\xe6\xd5\x33\x92\x99\x9c\x47\xa3\xa0\xfa\x20\x1c\xc4\x34\xa4\x28\x68\x34\xb2\x1a\x84\x34\x1a\x11\xfb\x17\xe4\x68\x80\x24\x19\x28\x8d\x26\xa4\xa5\x99\x78\xff\xd3\xe6\x2b\xc3\x0c\xc7\xe8\xb9\xd0\x06\x26\x6c\x1a\xf8\xb5\xdc\x82\x09\xc8\x31\xa4\x33\x86\xe7\x85\x54\x86\x92\x44\x0a\x83\xc2\xba\x61\x82\x19\x06\xdc\xd3\x09\x70\x0c\x0f\xfe\x26\x39\x5c\xb0\xbc\xcc\x57\x8a\x52\xa3\x72\x12\xc4\x56\x21\xa4\x35\xb1\xa0\xdc\x62\x4a\xb6\x88\xcf\x99\x38\x23\x99\xc2\x49\x48\x39\x8b\xfd\x58\x4a\xa3\x8d\x82\xc2\x4f\xb4\x5e\x49\x63\x0b\x1c\x5b\x0d\x25\x0a\x79\x48\xb5\x99\x73\xd4\x19\xa2\xe9\x70\x53\x01\x73\x78\xc4\xde\x69\x6c\x96\x9c\xe0\x37\x52\xe0\xd7\x39\x1b\x05\xb1\x4c\xe7\x8d\x65\xca\x66\x84\xa5\xd5\x75\xeb\x14\x35\x1e\x96\xdf\x25\x1c\xb4\x0e\xa9\x80\x59\x0c\x8a\xd4\x1f\x1e\x13\x33\xb4\xc9\xa6\xc4\x79\x0e\x69\x0e\x6a\xca\x84\x17\x4b\x63\x64\x7e\x78\xf0\x4f\x71\x71\xd4\xf2\xb3\xf0\xf5\x50\xd3\x1d\xc1\xab\x28\xa2\xa2\x9b\xb6\xce\x1e\xd6\xac\x63\x05\x22\xa5\x64\xe6\x55\x09\x0a\xe9\x25\x29\xc0\x64\x87\x64\xdf\xdf\x27\x57\xb4\xf5\xec\xd0\x11\xdb\x7f\x94\x52\x1f\x8b\x92\xb7\x68\x2c\x72\x52\x1d\x6b\xf2\x27\xf6\xa8\x7b\xb0\xcd\x6b\x2e\x12\x97\x94\x4a\x4b\x75\x58\x48\x66\xab\x4e\x1d\x75\xdd\x04\x8a\x42\xbb\xdb\x04\x10\xdd\xdd\xde\x7c\xbf\xf9\x54\x5d\x27\xf0\x39\xeb\x61\xe7\x97\xfc\x77\xe0\x5d\x75\xc7\x92\xb8\x65\x7d\xff\xe1\xcb\x2f\x13\xdf\xf3\xbc\x65\xa1\x72\x69\x4b\xed\x58\xbd\x94\x66\x1b\x55\x83\x79\xc1\xc1\xa0\x25\xc6\x6c\xd3\x64\x2c\x45\x1a\x79\x5e\x3f\x62\x7b\x82\x9a\xa3\x62\xd3\xcc\xac\x57\xbd\x53\x76\x16\x7d\x5f\x12\x9b\x18\xa9\x92\x45\x2a\xcf\xc5\x00\x54\x0f\xd2\x33\x72\x3a\xe5\xb6\x0f\x53\x30\xd0\x08\x2d\xbf\x2e\x5f\x0b\xe9\x05\x8a\x92\x12\x50\x0c\xbc\x0c\x74\x21\x8b\xb2\x08\xa9\x51\x25\x36\x4a\xbc\x28\x6c\x2f\x61\xba\x50\xf6\xbc\xf4\x30\xae\x8e\x2f\x44\x97\x97\x6e\xbe\x92\xab\xab\xce\x16\xec\x44\xf5\xd6\xc7\x86\xe5\xea\xb5\x96\xf9\xc8\x57\x97\xb4\x53\x19\x39\xc7\x34\x9e\xaf\xe5\x60\x87\x1b\xec\x54\xf0\x3a\x93\xe7\x27\x55\xd5\x9f\x30\x31\x91\x0f\x2b\xff\xdb\xd7\x8f\xf7\xef\x3e\x6f\xaf\xff\x1e\x06\xc3\x8d\x1d\x00\x9a\x9f\x89\x3f\x28\x91\x22\xe1\x2c\x39\x73\x2d\x23\x4b\xf3\xe7\x5f\x34\xfa\x71\x7d\x7d\xf7\xfe\x76\xf0\x63\x38\x8f\xc3\x1f\xa4\xb7\x81\x77\xf3\xb7\xdd\x8f\x1b\x06\xfe\xa2\xbf\xfb\x46\x49\x35\xdb\xfb\xda\xbd\x6f\xf2\x6f\xaa\xbb\x54\xdd\x58\x65\x13\x6c\xb7\x81\x6a\x8f\xb0\x4f\xdc\x96\xb6\x39\x5c\x17\x37\xa3\x0d\xf0\xdb\x72\xd2\x3e\xea\x44\xb1\xc2\x10\xad\x92\x7a\xf5\x98\x95\x58\xfd\xbb\x55\xe3\xd4\x8e\x79\xbb\x16\x38\x8b\xed\xe6\x5e\x1d\x72\x67\x14\x6a\x59\xaa\x64\x70\xb4\xd3\xb7\x25\xaa\xb9\xf7\xef\xf8\x60\xfc\xdf\x50\xcc\x6a\x97\x3a\x5d\x5f\xa5\x06\xa0\x73\x69\x67\x85\xd9\xf5\x5e\xbb\xa1\x26\x68\x92\xec\x31\x43\x4b\x9e\xe9\x21\x46\xcd\x32\x33\xc0\x74\x68\x5c\xb7\x46\x3e\x34\x0b\xfc\x7a\x37\xac\x96\xc5\x6a\xf3\xfe\x19\x00\x00\xff\xff\x0d\xdd\x07\x67\x89\x0b\x00\x00")

func webBinIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_webBinIndexHtml,
		"web-bin/index.html",
	)
}

func webBinIndexHtml() (*asset, error) {
	bytes, err := webBinIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web-bin/index.html", size: 2953, mode: os.FileMode(493), modTime: time.Unix(1454052995, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"web-bin/index.html": webBinIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"web-bin": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{webBinIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
